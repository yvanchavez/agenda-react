{"version":3,"sources":["components/Header.js","components/Formulario.js","components/Contacto.js","components/Contactos.js","components/ContactoSeleccionado.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","aria-haspopup","aria-labelledby","placeholder","Formulario","agregarContacto","useState","nombres","apellidos","fechaNac","direccion","telCasa","telCelular","observaciones","contacto","setContacto","error","setError","handleChange","e","contactoAntiguo","target","name","value","onSubmit","preventDefault","trim","copiaContacto","uuidv4","role","htmlFor","onChange","cols","rows","Contacto","setContactoSelec","onClick","src","alt","Contactos","contactos","map","c","ContactoSeleccionado","contactoselec","App","contactosLS","JSON","parse","localStorage","getItem","setContactos","objContacto","contactosAntiguos","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3ad34412.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n                <a className=\"navbar-brand\" href=\"!#\">Navbar</a>\r\n                <button className=\"navbar-toggler d-lg-none\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavId\" aria-controls=\"collapsibleNavId\"\r\n                    aria-expanded=\"false\" aria-label=\"Toggle navigation\"></button>\r\n                <div className=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\r\n                    <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n                        <li className=\"nav-item active\">\r\n                            <a className=\"nav-link\" href=\"!#\">Home <span className=\"sr-only\">(current)</span></a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"!#\">Link</a>\r\n                        </li>\r\n                        <li className=\"nav-item dropdown\">\r\n                            <a className=\"nav-link dropdown-toggle\" href=\"!#\" id=\"dropdownId\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Dropdown</a>\r\n                            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownId\">\r\n                                <a className=\"dropdown-item\" href=\"!#\">Action 1</a>\r\n                                <a className=\"dropdown-item\" href=\"!#\">Action 2</a>\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                    <form className=\"form-inline my-2 my-lg-0\">\r\n                        <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\"/>\r\n                        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                    </form>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState, Fragment } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst Formulario = ({ agregarContacto }) => {\r\n\r\n  const [contacto, setContacto] = useState({\r\n    nombres: '',\r\n    apellidos: '',\r\n    fechaNac: '',\r\n    direccion: '',\r\n    telCasa: '',\r\n    telCelular: '',\r\n    observaciones: ''\r\n  });\r\n\r\n  const [error, setError] = useState(false);\r\n\r\n  // funcion que modifica el state de acuerdo a los inputs del formulario.\r\n  const handleChange = (e) => {\r\n    let contactoAntiguo = { ...contacto };\r\n    contactoAntiguo[e.target.name] = e.target.value;\r\n    setContacto(contactoAntiguo);\r\n  }\r\n\r\n  const enviarFormulario = (e) => {\r\n    // Prevenir que la pagina se recargue\r\n    e.preventDefault();\r\n    // Validar que todos los campos estén llenos\r\n    let { nombres, apellidos, fechaNac, telCelular,\r\n      direccion, observaciones, telCasa } = contacto;\r\n\r\n    // let nombres = contacto.nombres;\r\n\r\n    if (nombres.trim() === \"\" || apellidos.trim() === \"\" ||\r\n      fechaNac.trim() === \"\" || telCelular.trim() === \"\" ||\r\n      direccion.trim() === \"\" || observaciones.trim() === \"\" ||\r\n      telCasa.trim() === \"\") {\r\n      // hay un error y todos los campos deben ser llenados\r\n      setError(true);\r\n      return;\r\n    } else {\r\n      // significa que no hay errores en el formulario\r\n      // por sí acaso, cambiamos el error a false, sin importar su valor anterior\r\n      setError(false);\r\n      // crear el contacto en la agenda\r\n      let copiaContacto= {...contacto};\r\n      copiaContacto.id = uuidv4();\r\n      agregarContacto(copiaContacto);\r\n      // reiniciar el formulario, es decir el state\r\n      setContacto({\r\n        nombres: '',\r\n        apellidos: '',\r\n        fechaNac: '',\r\n        direccion: '',\r\n        telCasa: '',\r\n        telCelular: '',\r\n        observaciones: ''\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n\r\n      <form className=\"row\" onSubmit={enviarFormulario}>\r\n\r\n        {\r\n          error ?\r\n            <div className=\"col-12\">\r\n              <div className=\"alert alert-danger text-center\" role=\"alert\">\r\n                <strong>Error!</strong> Todos los campos, deben estar debidamente llenados\r\n              </div>\r\n            </div> : null\r\n        }\r\n\r\n\r\n        <div className=\"form-group col-md-3\">\r\n          <label htmlFor=\"inputNombre\">Nombres:</label>\r\n          <input type=\"text\" id=\"inputNombre\" className=\"form-control\"\r\n            name=\"nombres\" onChange={handleChange} value={contacto.nombres} />\r\n        </div>\r\n        <div className=\"form-group col-md-3\">\r\n          <label htmlFor=\"inputApellidos\">Apellidos:</label>\r\n          <input type=\"text\" id=\"inputApellidos\" className=\"form-control\"\r\n            name=\"apellidos\" onChange={handleChange} value={contacto.apellidos} />\r\n        </div>\r\n        <div className=\"form-group col-md-3\">\r\n          <label htmlFor=\"inputFecha\">Fecha de Nacimiento:</label>\r\n          <input type=\"date\" id=\"inputFecha\" className=\"form-control\"\r\n            name=\"fechaNac\" onChange={handleChange} value={contacto.fechaNac} />\r\n        </div>\r\n        <div className=\"form-group col-md-3\">\r\n          <label htmlFor=\"inputDireccion\">Dirección:</label>\r\n          <input type=\"text\" id=\"inputDireccion\" className=\"form-control\"\r\n            name=\"direccion\" onChange={handleChange} value={contacto.direccion} />\r\n        </div>\r\n        <div className=\"form-group col-md-3\">\r\n          <label htmlFor=\"inputTelCasa\">Teléfono de Casa:</label>\r\n          <input type=\"text\" id=\"inputTelCasa\" className=\"form-control\"\r\n            name=\"telCasa\" onChange={handleChange} value={contacto.telCasa} />\r\n        </div>\r\n        <div className=\"form-group col-md-3\">\r\n          <label htmlFor=\"inputTelCelular\">Telefono Celular:</label>\r\n          <input type=\"text\" id=\"inputTelCelular\" className=\"form-control\"\r\n            name=\"telCelular\" onChange={handleChange} value={contacto.telCelular} />\r\n        </div>\r\n        <div className=\"form-group col-md-6\">\r\n          <label htmlFor=\"inputObservaciones\">Observaciones:</label>\r\n          <textarea cols=\"30\" id=\"inputObservaciones\" rows=\"2\" className=\"form-control\"\r\n            name=\"observaciones\" onChange={handleChange} value={contacto.observaciones}></textarea>\r\n        </div>\r\n        <div className=\"form-group col-12\">\r\n          <button type=\"submit\" className=\"btn btn-block btn-outline-primary\">\r\n            Agregar Contacto\r\n        </button>\r\n        </div>\r\n      </form>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Formulario","import React from 'react'\r\n\r\nconst Contacto = ({ contacto, setContactoSelec }) => {\r\n return (\r\n  <li className=\"list-group-item\" onClick={() => {\r\n   setContactoSelec(contacto);\r\n  }}>\r\n   <img src=\"https://api.adorable.io/avatars/45/abott@adorable.png\"\r\n    className=\"rounded-circle\"\r\n    alt=\"\" />\r\n   <span className=\"ml-5\">{contacto.nombres} {contacto.apellidos}</span>\r\n  </li>\r\n )\r\n}\r\n\r\nexport default Contacto","import React from 'react'\r\nimport Contacto from './Contacto'\r\n\r\nconst Contactos = ({ contactos, setContactoSelec }) => {\r\n\r\n // let lis = [];\r\n\r\n // contactos.forEach(c => {\r\n //  lis.push(<li className=\"list-group-item\">{c.nombres}</li>)\r\n // });\r\n\r\n\r\n return (\r\n  <ul className=\"list-group list-group-flush\">\r\n   {/* {lis} */}\r\n   {\r\n    contactos.map(c => {\r\n     return <Contacto contacto={c} setContactoSelec={setContactoSelec} />\r\n    })\r\n   }\r\n  </ul>\r\n )\r\n}\r\n\r\nexport default Contactos","\r\nimport React, { Fragment } from 'react'\r\n\r\n\r\n\r\n\r\n\r\nconst ContactoSeleccionado = ({ contactoselec }) => {\r\n return (\r\n\r\n  <div className=\"card shadow\">\r\n   <div className=\"card-header bg-dark\">\r\n    <h3 className=\"card-title text-center text-light\">Información de Contacto</h3>\r\n   </div>\r\n   <div className=\"card-body\">\r\n    {\r\n     // SI EL CONTACTO SELECCIONADO TUVIERA EL ATTR NOMBRES,\r\n     // significa que no es un objeto vacío\r\n     contactoselec.nombres ? (\r\n      <Fragment>\r\n       <img src=\"https://api.adorable.io/avatars/150/abott@adorable.png\"\r\n        alt=\"\" className=\"rounded-circle d-block m-auto\" />\r\n       <p className=\"card-text\"><strong>Nombres: </strong>{contactoselec.nombres}</p>\r\n       <p className=\"card-text\"><strong>Apellidos: </strong>{contactoselec.apellidos}</p>\r\n       <p className=\"card-text\"><strong>Fecha de Nacimiento: </strong>{contactoselec.fechaNac}</p>\r\n       <p className=\"card-text\"><strong>Dirección: </strong> {contactoselec.direccion}</p>\r\n       <p className=\"card-text\"><strong>Teléfono de casa: </strong>{contactoselec.telCasa}</p>\r\n       <p className=\"card-text\"><strong>Teléfono celular: </strong>{contactoselec.telCelular}</p>\r\n       <p className=\"card-text\"><strong>Observaciones: </strong>{contactoselec.observaciones}</p>\r\n      </Fragment>\r\n     ) : <p className=\"card-text text-center\"> {\"=(\"} No has seleccionado ningún contacto.</p>\r\n    }\r\n\r\n\r\n   </div>\r\n  </div>\r\n )\r\n}\r\n\r\nexport default ContactoSeleccionado","import React, { Fragment, useState } from 'react';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport Contactos from './components/Contactos';\nimport ContactoSeleccionado from './components/ContactoSeleccionado';\n\nfunction App() {\n\n  // Traemos los contactos desde el Local Storage\n  let contactosLS = JSON.parse(localStorage.getItem(\"contactos\"));\n  // Si al traer los contactos del LS, no habia niguno o \n  // que estaba indefinido\n  if (!contactosLS) {\n    // crear un arreglo vacio como para inicializar contactosLS\n    contactosLS = [];\n  }\n\n  // Iniciar los contactos con los del LS o en su defecto con un arreglo vacio\n  const [contactos, setContactos] = useState(contactosLS);\n\n  const [contactoselec, setContactoSelec] = useState({});\n\n  const agregarContacto = (objContacto) => {\n    let contactosAntiguos = [...contactos, objContacto];\n    localStorage.setItem(\"contactos\", JSON.stringify(contactosAntiguos));\n    setContactos(contactosAntiguos);\n  }\n\n  return (\n    <Fragment>\n      <Header />\n      <main className=\"container-fluid\">\n        <h1 className=\"display-3 text-center\">Agenda<span className=\"text-danger\">APP</span></h1>\n        <div className=\"row\">\n          <div className=\"col\">\n            <Formulario agregarContacto={agregarContacto} />\n          </div>\n        </div>\n        <hr />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            {/* Lista de contactos */}\n            <Contactos contactos={contactos} setContactoSelec={setContactoSelec} />\n          </div>\n          <div className=\"col-md-6\">\n            {/* Contacto seleccionado */}\n            <ContactoSeleccionado contactoselec={contactoselec} />\n          </div>\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}